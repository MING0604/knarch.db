buildscript {
    repositories {
        jcenter()
        google()
        gradlePluginPortal()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap/" }
        maven {
            url  "https://dl.bintray.com/jetbrains/kotlin-native-dependencies"
        }
        maven { url 'https://dl.bintray.com/touchlabpublic/kotlin' }
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$BINTRAY_VERSION"
    }
}

plugins {
    id 'kotlin-multiplatform' version '1.3.0'//'1.3.20-dev-863'
}
repositories {
    maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    maven {     url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    maven { url 'https://dl.bintray.com/touchlabpublic/kotlin' }
    mavenCentral()
}

kotlin {
    targets {

        /*fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')*/


        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
        /*fromPreset(presets.iosX64, 'ios'){
            compilations.each {
                it.outputKinds('EXECUTABLE')
            }
        }*/


//        fromPreset(presets.macosX64, 'nativeCommon')

        fromPreset(presets.macosX64, 'macos'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
            compilations.test {
                it.extraOpts("-native-library", "../cpp/bcdist/macos_x64/tlruntime.bc")
            }
        }
        
        fromPreset(presets.iosX64, 'iosX64'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }
        fromPreset(presets.iosArm64, 'iosArm64'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }
        fromPreset(presets.iosArm32, 'iosArm32'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }
        /*fromPreset(presets.androidNativeArm32, 'androidNativeArm32')
        fromPreset(presets.androidNativeArm64, 'androidNativeArm64')*/


        /*configure([macos]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'sample.main'
        }*/
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "co.touchlab.stately:stately:0.3.1-k1.3.0-a2"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        nativeCommonMain {
            dependencies {
            }
        }
        nativeCommonTest { }

        appleMain {
            dependsOn nativeCommonMain
        }

        appleTest {
            dependsOn nativeCommonTest
        }

        configure([iosX64Main, iosArm32Main, iosArm64Main, macosMain]) {
            dependsOn appleMain
        }

        configure([iosX64Test, iosArm32Test, iosArm64Test, macosTest]) {
            dependsOn appleTest
        }
    }
}

void mergeCppOutput(String archFolder, String archZip){
    ant.zip(
            update: "true",
            destfile: "${project.buildDir}/classes/kotlin/$archFolder/main/knarch.klib"
    ) {
        zipfileset(
                dir: "${project.projectDir}/../cpp/bcdist/$archZip",
                prefix: "targets/$archZip/native"
        ) {
            include(name: '**.bc')
        }
    }
}

task mergeCppAll(dependsOn:build) {
    doLast {
        mergeCppOutput("iosArm32", "ios_arm32")
        mergeCppOutput("iosArm64", "ios_arm64")
        mergeCppOutput("iosX64", "ios_x64")
        mergeCppOutput("macos", "macos_x64")
    }
}

apply from: 'gradle/configpublish.gradle'

tasks.findByName("publish").dependsOn("mergeCppAll")